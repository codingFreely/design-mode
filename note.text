1.面向对象
2.设计原则
3.设计模式
4.综合示例

面向对象开始基础的步骤就是创建一个类，在类的基础上，面向对象三要素(对类的操作)：
1.继承
2.封装，数据的权限和保密,用public protected private来限制可以访问到成员变量的作用域。
一般下划线_开头的属性认为是private，不想对外暴露的
3.多态 同一接口不同实现。面向接口编程，保持子类的开放性和灵活性

为何使用面向对象？：
程序执行：顺序、判断、循环--结构化
*****面向对象--数据结构化
对于计算机，结构化的东西才是最简单的
编程应该简单&抽象
举例说明：比如一个人有年龄、姓名、生日、说话、吃饭，这么多东西可以集成到一个Person类中来管理。如果没有面向
对象呢？这么多东西就零散的，不方便管理。更加复杂的想，一个人有一万个属性呢？有一个人呢？再来些猫、狗呢。如果
不使用面向对象，我们的程序就是一盘散沙

UML类图：
Unified Modeling Language 统一建模语言
********************
设计原则：
何为设计？
《UNIX/LINUX设计哲学》
准则1：小即是美(细化)
准则2：让每个程序只做好一件事
准则3：快速建立原型(先满足需求)
准则4：舍弃高效率而取可移植性(代码通用)
准则5：采用纯文本来存储数据(可读性)
准则6：充分利用软件的杠杆效应(软件复用)
准则7：使用shell脚本来提高杠杆效应和可移植性
准则8：避免强制性的用户界面
准则9：让每个程序都成为过滤器
小准则：沉默是金
小准则：各部分之和大于整体
小准则：寻求90%的解决方案

SOLID五大设计原则：
S-单一职责原则
一个程序只做好一件事
如果功能过于复杂就拆分开，每个部分保持独立

O-开放封闭原则
对扩展开放，对修改封闭
增加需求时，扩展新代码，而非修改已有代码
这是软件设计终极目标

L-李氏置换原则
子类能覆盖父类
父类能出现的地方子类就能出现

I-接口独立原则
保持接口的单一独立，责任单一小而美，避免出现”胖接口”，

D-依赖倒置原则
现象接口编程，依赖于抽象而不依赖于具体
使用方只关注接口而不关注具体类的实现

S、O在js中常用,L、I、D体现较少
Promise举例说明S、O
单一职责原则：每个then中的逻辑只做好一件事
开放封闭原则：如果新增需求，扩展then
********************
设计模式：从设计到模式

23种设计模式分为三大类：
1.创建型 类应该长啥样，如何创建 ：有工厂模式(工厂方法模式、抽象工厂模式、建造者模式)、单例模式、原型模式
2.结构型 类于类的组合: 适配器、装饰器、代理模式、外观模式、桥接模式、组合模式、享元模式
3.行为型 开发中的常见行为：策略、模板方式模式、观察者、迭代器、责任链、命令、备忘录、状态、访问者、中介者、解释器


********************

